/*
 * Autor Guillermo Blasco
 * Versión reducida del Flappy Bird
 * 
 */
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;

import acm.program.*;
import acm.util.RandomGenerator;
import acm.graphics.*;

public class FlappyAcm extends GraphicsProgram{
	
	private static final int ANCHO_PANTALLA = 800;
	private static final int ALTO_PANTALLA = 400;
	
	private static final int ALTO_PAJARO = 12;
	
	private static final int ALTO_COLUMNA = 300;
	private static final int ANCHO_COLUMNA = 24;
	
	private static final int ALTO_BASE = ALTO_COLUMNA + 50;
	private static final int ANCHO_BASE = 24;
	
	private static final int HUECO = ALTO_COLUMNA + 50;
	
	private static final int SEPARACION_COLUMNAS = 200;
	private static final int SEPARACION_BASES = 200;
	
	//velocidad en el eje X y en el eje Y
	double xVelocidad = -1;
	double yVelodiad = 1;
	
	GImage pajaro;
	
	GImage columna1 = new GImage("pipe_top.png");
	GImage columna2 = new GImage("pipe_top.png");
	GImage columna3 = new GImage("pipe_top.png");
	GImage columna4 = new GImage("pipe_top.png");
	
	GImage base1 = new GImage("pipe_bottom.png");
	GImage base2 = new GImage("pipe_bottom.png");
	GImage base3 = new GImage("pipe_bottom.png");
	GImage base4 = new GImage("pipe_bottom.png");
	
	//uso una variable booleana para indicar que se ha terminado
	//la partida
	boolean GameOver = false;
	
	public void init() {
		//cambio el tamaño de la ventana
		setSize(ANCHO_PANTALLA, ALTO_PANTALLA);
		//como voy a utilizar el ratón para mover el pájaro, añado
		//los mouse listeners
		addMouseListeners();
		//añado también los listeners del teclado
		addKeyListeners();
		
		
		//creo el pájaro y lo añado
		pajaro = new GImage("fly1.png");
		add(pajaro, 200, ALTO_PANTALLA/2);
		
		//añado las columnas y las bases
		cambiaColumna(columna1, 0);
		cambiaColumna(columna2, SEPARACION_COLUMNAS);
		cambiaColumna(columna3,SEPARACION_COLUMNAS*2);
		cambiaColumna(columna4,SEPARACION_COLUMNAS*3);
		
		cambiaBase(base1, 0);
		cambiaBase(base2, SEPARACION_BASES);
		cambiaBase(base3, SEPARACION_BASES*2);
		cambiaBase(base4, SEPARACION_BASES*3);
		
		
	}
	
	private void cambiaColumna(GImage columna, int separacion) {
		//añadimos la imagen en su posición correspondiente.
		columna.scale(0.35, 0.35);
		add(columna, ANCHO_PANTALLA + separacion, longitudColumna());
	}
	
	private void cambiaBase(GImage base, int separacion) {
		base.scale(0.35, 0.35);
		add(base, ANCHO_PANTALLA + separacion, HUECO);
	}
	
	public void run() {
		while (!GameOver) {
			mueveColumna(columna1);
			mueveColumna(columna2);
			mueveColumna(columna3);
			mueveColumna(columna4);
			mueveBase(base1);
			mueveBase(base2);
			mueveBase(base3);
			mueveBase(base4);
			muevePajaro();
			pause(10);
		}
	}
	
	private void mueveColumna(GImage imagen) {
		//mueve la columna a la izquierda
		imagen.move(xVelocidad, 0);
		//si la columna llega a la pared izquieda, le cambio
		//la posición a la pared derecha
		if((imagen.getX() + ANCHO_COLUMNA) == 0) {
			imagen.setLocation(ANCHO_PANTALLA, longitudColumna());
		}
	}
	
	private void mueveBase(GImage base) {
		//mueve la base a la izquierda
		base.move(xVelocidad, 0);
		//si la columna llega a la pared izquierda, le cambio
		//la posición a la pared derecha
		if((base.getX() + ANCHO_BASE) == 0) {
			base.setLocation(ANCHO_PANTALLA, HUECO);
		}
	}
	
	private void muevePajaro() {
		pajaro.move(0, yVelodiad);
		yVelodiad++;
		if(yVelodiad > 1) {
			yVelodiad = 1;
		}
	}
	
	public void keyPressed(KeyEvent evento) {
		if (evento.getKeyCode() == KeyEvent.VK_SPACE) {
		yVelodiad = -8;
		}
	}
	
	//El método longitudcolumna va a generar una posición distinta
	//de la columna cda vez que es llamado
	
	private int longitudColumna() {
		RandomGenerator r = new RandomGenerator();
		//lo que hago es generar un número negativo que está entre
		//el alto de la columna dividido entre 2
		//y -20
		return -(r.nextInt(ALTO_COLUMNA / 2) + 20);
	}
	
	private int longitudBase() {
		RandomGenerator r = new RandomGenerator();
		//lo que hago es generar un número negativo que está entre
		//el alto de la columna dividido entre 2
		//y -20
		return (r.nextInt(ALTO_BASE / 2) + 40);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
